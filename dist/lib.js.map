{"version":3,"file":"lib.js","sources":["../src/component/utils/compare.js","../src/component/utils/token.js","../src/component/components/dropdown.styl.js","../src/component/components/dropdown.js","../src/component/utils/outside-click.js","../src/component/index.styl.js","../src/component/index.js"],"sourcesContent":["import escape from \"escape-string-regexp\";\n\n/**\n * case-insensitive comparison\n */\nexport function compare(partialValue, fullValue) {\n    return new RegExp(`^${escape(partialValue || \"\")}$`, \"i\").test(fullValue || \"\");\n}\n\n/**\n * case-insensitive comparison (fuzzy)\n */\nexport function compareFuzzy(partialValue, fullValue) {\n    return new RegExp(escape(partialValue || \"\"), \"i\").test(fullValue || \"\");\n}\n","import { compare, compareFuzzy } from \"./compare\";\n\nexport function tokenRegex(opts = {}) {\n    const qtfr = opts.partial ? \"*\" : \"+\";\n\n    return new RegExp(\n        `(?!^|\\\\(|\\\\s)*` + // find beginning of token\n            `([-]+)?` + // capture prepended negation character\n            `([\\\\w.$]+)` + // the attribute name\n            `${opts.partial ? \"?\" : \"\"}` + // assume it's a token, even with no attribute\n            `:${opts.partial ? \"?\" : \"\"}` + // assume it's a token, even with no colon\n            `(?!:)` + // make sure colon isn't repeated\n            `([><=]*)` + // the operators\n            `(?:(\")(.${qtfr}?)(\\\\*)?\"|([^\\\\s()*\"]${qtfr}))` + // the attribute value, checking for quotes\n            `${opts.partial ? \"?\" : \"\"}` + // whether attribute value can be empty\n            `(\\\\*)?` + // capture appended wildcard\n            `(?!\\\\s|\\\\)|$)*`, // find the end of the token\n        \"g\"\n    );\n}\n\nexport function parseToken(value, attributes = [], nameKeyIncludes = []) {\n    const results = Array.isArray(value) ? value : tokenRegex({ partial: true }).exec(value);\n\n    if (!results || !results.length) {\n        return {};\n    }\n\n    const tokenData = {\n        fullToken: results[0],\n        attributeName: results[2],\n        attributeNameValid: false,\n        attributeValue: results[5] || results[7],\n        attributeValueValid: false,\n        prepended: results[1] || \"\",\n        operator: results[3],\n        negated: results[0].indexOf(\"-\") > -1,\n        quoted: Boolean(results[4]),\n        wildcard: Boolean(results[6] || results[8]),\n    };\n\n    if (attributes) {\n        const attribute = attributes.find((attr) => {\n            let matchFound = false;\n            for (const key of nameKeyIncludes) {\n                if (compare(attr[key], tokenData.attributeName)) {\n                    matchFound = true;\n                    break;\n                }\n            }\n            return matchFound;\n        });\n\n        if (attribute) {\n            tokenData.attributeNameValid = true;\n            tokenData.attributeValueValid = true;\n\n            if (Array.isArray(attribute.enumerations)) {\n                tokenData.attributeValueValid = attribute.enumerations.findIndex((v) => compareFuzzy(tokenData.attributeValue, v)) > -1;\n            }\n        }\n    }\n\n    return tokenData;\n}\n\nexport function serializeToken(token) {\n    const { prepended = \"\", attributeName = \"\", attributeValue = \"\", operator = \"\" } = token || {};\n\n    return `${prepended}${attributeName}:${operator}${attributeValue}`;\n}\n\nexport function extractTokens(value, attributes, nameKeyIncludes) {\n    const positions = [];\n    const regex = tokenRegex();\n\n    let result;\n    while ((result = regex.exec(value)) !== null) {\n        if (attributes) {\n            const parsed = parseToken(result, attributes, nameKeyIncludes);\n\n            if (!parsed.attributeNameValid || !parsed.attributeValueValid) {\n                continue;\n            }\n        }\n\n        positions.push([\n            result.index, // start position\n            regex.lastIndex, // end position\n        ]);\n    }\n\n    return positions;\n}\n","import styled from \"@emotion/styled\";\nimport { keyframes } from \"@emotion/react\";\n\nimport {\n    top,\n    left,\n    color,\n    boxShadow,\n    borders,\n    borderColor,\n    borderRadius,\n    space,\n    width,\n    minWidth,\n    maxWidth,\n    maxHeight,\n    fontSize,\n    fontWeight,\n    fontFamily,\n    lineHeight,\n    letterSpacing,\n} from \"styled-system\";\n\nexport const swingDown = keyframes`\n  0% {\n    opacity: 0;\n    transform: perspective(50em) rotateX(-30deg);\n  }\n  100% {\n    opacity: 1;\n    transform: perspective(50em) rotateX(0deg);\n  }\n`;\n\nexport const Container = styled(\"aside\")`\n    display: inline-block;\n    position: absolute;\n    z-index: 10;\n    transform-origin: 50% 0;\n    animation: ${swingDown} ease-in-out 250ms;\n    transition: top 100ms, left 100ms;\n\n    ${top}\n    ${left}\n  ${color}\n  ${boxShadow}\n  ${borders}\n  ${borderColor}\n  ${borderRadius}\n  ${space}\n  ${width}\n  ${minWidth}\n  ${fontSize}\n  ${fontWeight}\n  ${fontFamily}\n  ${lineHeight}\n  ${letterSpacing}\n`;\n\nContainer.defaultProps = {\n    bg: \"#555555\",\n    boxShadow: \"0 4px 10px rgba(0, 0, 0, .25)\",\n    color: \"#FFFFFF\",\n    minWidth: \"280px\",\n};\n\nexport const Section = styled(\"section\")`\n    padding: 15px;\n    text-align: ${(props) => (props.center ? \"center\" : \"inherit\")};\n    :not(:last-child) {\n        border-bottom: 1px solid rgba(255, 255, 255, 0.15);\n    }\n`;\n\nexport const Suggestions = styled(\"ul\")`\n    list-style-type: none;\n    line-height: 20px;\n    margin: 10px 0;\n    overflow: auto;\n    padding-inline-start: 0;\n\n    ${space}\n    ${color}\n  ${borders}\n  ${maxHeight}\n`;\n\nSuggestions.defaultProps = {\n    maxHeight: \"200px\",\n};\n\nexport const Suggestion = styled(\"li\")`\n    cursor: pointer;\n    border: 1px solid transparent;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    ${space}\n    ${maxWidth}\n\n  ${(props) => props.active && color}\n  ${(props) => props.active && borders}\n  ${(props) => props.active && borderColor}\n`;\n\nSuggestion.defaultProps = {\n    bg: \"#FFFFFF\",\n    color: \"#000000\",\n    p: \"3px 15px\",\n    maxWidth: \"320px\",\n};\n\nexport const Operators = styled(Section)`\n    padding: 15px 0;\n`;\n\nexport const Operator = styled(\"div\")`\n    display: inline-block;\n    background: ${(props) => (props.active ? \"rgba(255, 255, 255, 0.2)\" : \"none\")};\n    font-weight: 500;\n    line-height: 18px;\n    padding: 5px 10px;\n    cursor: pointer;\n    &:hover {\n        background: rgba(255, 255, 255, 0.1);\n    }\n`;\n\nexport const OperatorLone = styled(Operator)`\n    display: block;\n    margin-bottom: 5px;\n`;\n\nexport const Key = styled(\"div\")`\n    display: inline-block;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 2px;\n    font-size: 12px;\n    font-weight: 700;\n    line-height: 18px;\n    min-width: 20px;\n    text-align: center;\n    vertical-align: middle;\n    padding: 2px 5px;\n    margin-right: 5px;\n`;\n\nexport const KeyOutline = styled(Key)`\n    background: none;\n    border: 1px solid ${(props) => props.theme.color};\n    color: ${(props) => props.theme.color};\n    font-size: 8px;\n    padding: 0;\n    width: ${(props) => (props.long ? \"36px\" : \"18px\")};\n    height: 18px;\n`;\n\nexport const Helper = styled(\"div\")`\n    display: inline-block;\n    opacity: 0.5;\n    &:not(:last-child) {\n        margin-right: 15px;\n    }\n`;\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { compareFuzzy } from \"../utils/compare\";\nimport { parseToken, serializeToken } from \"../utils/token\";\n\nimport { Container, Section, Suggestions, Suggestion, Helper, Operators, Operator, OperatorLone, Key, KeyOutline } from \"./dropdown.styl\";\n\nexport default class Dropdown extends PureComponent {\n    static propTypes = {\n        // eslint-disable-line\n        value: PropTypes.string,\n        nameKey: PropTypes.string,\n        attributes: PropTypes.array,\n        onSelect: PropTypes.func,\n        onClose: PropTypes.func,\n        offsetX: PropTypes.number,\n        offsetY: PropTypes.number,\n        keyboardHelpers: PropTypes.bool,\n        footerComponent: PropTypes.func,\n        dropdownProps: PropTypes.object,\n        selectorProps: PropTypes.object,\n        listProps: PropTypes.object,\n        translations: PropTypes.object,\n    };\n\n    static defaultProps = {\n        // eslint-disable-line\n        value: \"\",\n        nameKey: \"name\",\n        translationKey: \"translation\",\n        onSelect: () => { },\n        onClose: () => { },\n        keyboardHelpers: true,\n        footerComponent: () => null,\n    };\n\n    constructor(props) {\n        super(props);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.handleEnterKey = this.handleEnterKey.bind(this);\n        this.handleEscKey = this.handleEscKey.bind(this);\n        this.handleArrowKeys = this.handleArrowKeys.bind(this);\n        this.adjustListScroll = this.adjustListScroll.bind(this);\n        this.getAttribute = this.getAttribute.bind(this);\n        this.getSuggestions = this.getSuggestions.bind(this);\n        this.getSuggestionAddons = this.getSuggestionAddons.bind(this);\n        this.filterSuggestions = this.filterSuggestions.bind(this);\n        this.acceptSuggestion = this.acceptSuggestion.bind(this);\n        this.getOperators = this.getOperators.bind(this);\n        this.setOperator = this.setOperator.bind(this);\n        this.state = {\n            suggestions: [],\n            highlightedIdx: 0,\n            selectedIdx: null,\n            prepended: \"\",\n            operator: \"\",\n            negated: false,\n        };\n    }\n\n    componentDidMount() {\n        this.filterSuggestions(this.props.value);\n        this.props.keyboardHelpers && document.addEventListener(\"keydown\", this.onKeyDown, false);\n    }\n\n    componentWillUnmount() {\n        this.props.keyboardHelpers && document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.filterSuggestions(nextProps.value);\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.suggestions.length === 0) {\n            this.props.onClose();\n        }\n    }\n\n    onKeyDown(evt) {\n        switch (evt.keyCode) {\n            case 9: // tab key\n            case 13: // enter key\n                this.handleEnterKey(evt);\n                break;\n            case 27: // esc key\n                this.handleEscKey(evt);\n                break;\n            case 38: // up key\n            case 40: // down key\n                this.handleArrowKeys(evt, evt.keyCode);\n                break;\n        }\n    }\n\n    handleEnterKey(evt) {\n        evt.preventDefault();\n        this.acceptSuggestion();\n    }\n\n    handleEscKey(evt) {\n        evt.preventDefault();\n        this.props.onClose(true);\n    }\n\n    handleArrowKeys(evt, keyCode) {\n        evt.preventDefault();\n\n        const { highlightedIdx } = this.state;\n        const isDownKey = keyCode === 40;\n\n        // the furthest down it can go before wrapping\n        const max = this.state.suggestions.length - 1;\n\n        // determine the next position\n        const newIdx = highlightedIdx !== null ? (isDownKey ? highlightedIdx + 1 : highlightedIdx - 1) : isDownKey ? 0 : max;\n\n        this.setState(\n            {\n                // make sure it doesn't go out of bounds by resetting to opposite side\n                highlightedIdx: isDownKey ? (newIdx <= max ? newIdx : 0) : newIdx >= 0 ? newIdx : max,\n            },\n            this.adjustListScroll\n        );\n    }\n\n    adjustListScroll() {\n        const { offsetTop, clientHeight: selectorHeight } = this._selected;\n\n        const { scrollTop, clientHeight: listHeight } = this._list;\n\n        const topWaypoint = selectorHeight;\n        const bottomWaypoint = listHeight - selectorHeight;\n        const position = offsetTop - scrollTop;\n\n        if (position > bottomWaypoint) {\n            this._list.scrollTop += selectorHeight + (position - bottomWaypoint);\n        } else if (position < topWaypoint) {\n            this._list.scrollTop = offsetTop - selectorHeight + (position - topWaypoint);\n        }\n    }\n\n    getAttribute(selectedIdx) {\n        if (selectedIdx !== null && selectedIdx > -1) {\n            return this.props.attributes[selectedIdx];\n        }\n    }\n\n    getSuggestions(attribute) {\n        const { nameKey, attributes, translationKey } = this.props;\n        // all options in dropdown\n        return attribute ? attribute.enumerations || [] : attributes.map((attr) => attr[translationKey] || attr[nameKey]);\n    }\n\n    getSuggestionAddons(attribute, parsed) {\n        const addons = [];\n\n        if (attribute) {\n            if (!parsed.wildcard && !attribute.enumerations && parsed.attributeValue && attribute.type === \"string\") {\n                addons.push(`\"${parsed.attributeValue}\"`);\n            }\n\n            if (parsed.attributeValue && attribute.type === \"string\") {\n                parsed.quoted && !attribute.enumerations\n                    ? addons.push(`\"${parsed.attributeValue}*\"`)\n                    : addons.push(`*${parsed.attributeValue}*`, `${parsed.attributeValue}*`, `*${parsed.attributeValue}`);\n            }\n        }\n\n        return addons;\n    }\n\n    filterSuggestions(value) {\n        const { nameKey, translationKey, attributes } = this.props;\n        let parsed = parseToken(value);\n\n        const hasAttributeName = parsed.attributeName && value.indexOf(\":\") > -1;\n        const selectedIdx = hasAttributeName ? attributes.findIndex((attr) => attr[nameKey] === parsed.attributeName || attr[translationKey] === parsed.attributeName) : -1;\n\n        const attribute = this.getAttribute(selectedIdx);\n        const suggestions = this.getSuggestions(attribute);\n        const searchValue = selectedIdx > -1 ? parsed.attributeValue : parsed.attributeName;\n\n        const filtered = suggestions.filter((v) => compareFuzzy(searchValue, v)).concat(this.getSuggestionAddons(attribute, parsed));\n\n        this.setState({\n            selectedIdx,\n            prepended: parsed.prepended,\n            operator: parsed.operator,\n            negated: parsed.negated,\n            suggestions: filtered,\n            highlightedIdx: 0,\n        });\n    }\n\n    acceptSuggestion() {\n        const { nameKey, onSelect } = this.props;\n\n        const { suggestions, highlightedIdx, selectedIdx, prepended, operator } = this.state;\n\n        const attribute = this.getAttribute(selectedIdx);\n        const suggestion = suggestions[highlightedIdx];\n\n        const newValue = attribute ? `${attribute[nameKey]}:${operator}${suggestion}` : suggestion;\n\n        const appended = selectedIdx === -1 ? \":\" : \"\";\n        onSelect(`${prepended}${newValue}`, appended);\n    }\n\n    getOperators() {\n        const operators = [];\n        const attribute = this.getAttribute(this.state.selectedIdx);\n\n        if (attribute) {\n            switch (attribute.type) {\n                case \"int\":\n                case \"float\":\n                    operators.push({\n                        name: \"GT\",\n                        char: \">\",\n                        active: this.state.operator === \">\",\n                    });\n                    operators.push({\n                        name: \"LT\",\n                        char: \"<\",\n                        active: this.state.operator === \"<\",\n                    });\n                    operators.push({\n                        name: \"GTE\",\n                        char: \">=\",\n                        active: this.state.operator === \">=\",\n                    });\n                    operators.push({\n                        name: \"LTE\",\n                        char: \"<=\",\n                        active: this.state.operator === \"<=\",\n                    });\n                    break;\n            }\n        }\n\n        return operators;\n    }\n\n    setOperator(newOperator) {\n        const { value } = this.props;\n\n        const { negated, operator } = this.state;\n\n        if (newOperator === \"-\") {\n            const newValue = value.replace(/^-?(.*)/, `${negated ? \"\" : \"-\"}$1`);\n\n            this.props.onSelect(newValue);\n        } else {\n            const token = parseToken(value);\n            token.operator = operator === newOperator ? \"\" : newOperator;\n\n            this.props.onSelect(serializeToken(token));\n        }\n    }\n\n    render() {\n        const Footer = this.props.footerComponent;\n\n        return (\n            <Container left={this.props.offsetX || 0} top={this.props.offsetY || 0} {...this.props.dropdownProps} data-testid=\"dropdown\">\n                <Suggestions {...this.props.listProps} ref={(ref) => (this._list = ref)}>\n                    {this.state.suggestions.map((suggestion, key) => {\n                        const isActive = this.state.highlightedIdx === key;\n\n                        return (\n                            <Suggestion\n                                key={key}\n                                active={isActive}\n                                onClick={this.acceptSuggestion}\n                                onMouseOver={() => this.setState({ highlightedIdx: key })}\n                                ref={isActive ? (ref) => (this._selected = ref) : undefined}\n                                {...this.props.selectorProps}>\n                                {suggestion}\n                            </Suggestion>\n                        );\n                    })}\n                </Suggestions>\n\n                <Operators>\n                    <OperatorLone active={this.state.negated} onClick={() => this.setOperator(\"-\")}>\n                        <Key>-</Key>\n                        {this.props.translations && this.props.translations.negate ? this.props.translations.negate : \"NEGATE\"}\n                    </OperatorLone>\n\n                    {this.getOperators().map((operator, key) => (\n                        <Operator key={key} active={operator.active} onClick={() => this.setOperator(operator.char)}>\n                            <Key>{operator.char}</Key>\n                            {operator.name}\n                        </Operator>\n                    ))}\n                </Operators>\n\n                {this.props.keyboardHelpers && (\n                    <Section center>\n                        <Helper>\n                            <KeyOutline>▲</KeyOutline>\n                            <KeyOutline>▼</KeyOutline>\n                            {this.props.translations && this.props.translations.navigate ? this.props.translations.navigate : \"to navigate\"}\n                        </Helper>\n\n                        <Helper>\n                            <KeyOutline long>↵</KeyOutline>\n                            {this.props.translations && this.props.translations.select ? this.props.translations.select : \"to select\"}\n                        </Helper>\n                    </Section>\n                )}\n\n                <Footer />\n            </Container>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\n/**\n * Component that alerts if you click outside of it\n */\nexport default class OutsideAlerter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.wrapperRef = React.createRef();\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\n    }\n\n    /**\n     * Alert if clicked on outside of element\n     */\n    handleClickOutside(event) {\n        if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\n            if (this.props.notify) this.props.notify();\n        }\n    }\n\n    render() {\n        return <div ref={this.wrapperRef}>{this.props.children}</div>;\n    }\n}\n","import styled from \"@emotion/styled\";\nimport { css } from \"@emotion/css\";\nimport Textarea from \"react-textarea-autosize\";\n\nimport {\n    style,\n    space,\n    width,\n    color,\n    borders,\n    borderColor,\n    borderRadius,\n    boxShadow,\n    fontSize,\n    fontWeight,\n    fontFamily,\n    lineHeight,\n    textAlign,\n    letterSpacing,\n} from \"styled-system\";\n\nexport const Container = styled(\"div\")`\n    position: relative;\n    width: 100%;\n`;\n\nexport const InputContainer = styled(\"div\")`\n    position: relative;\n    ${space}\n    ${width}\n  ${borders}\n  ${borderColor}\n  ${borderRadius}\n  ${boxShadow}\n  ${color}\n  ${fontSize}\n  ${fontWeight}\n  ${fontFamily}\n  ${lineHeight}\n  ${letterSpacing}\n  ${textAlign}\n`;\n\nInputContainer.defaultProps = {\n    bg: \"#FFFFFF\",\n    color: \"#505050\",\n    border: \"1px solid rgba(0, 0, 0, .1)\",\n    fontFamily: \"monospace\",\n};\n\nconst CleanInput = Textarea;\n\nconst placeholderColor = style({\n    prop: \"placeholderColor\",\n    cssProperty: \"color\",\n    key: \"colors\",\n});\n\nexport const Input = styled(CleanInput)`\n    display: block;\n    background: none;\n    border: none;\n    outline: none;\n    resize: none;\n    font: inherit;\n    width: 100%;\n    padding: 0;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    /* we only want overlay text visible */\n    /* need to do this so caret still shows up */\n    color: inherit;\n    -webkit-text-fill-color: transparent;\n    ::placeholder {\n        ${placeholderColor}\n        -webkit-text-fill-color: initial;\n    }\n`;\n\nInput.defaultProps = {\n    lineHeight: \"1.1rem\",\n    placeholderColor: \"#D7D7D7\",\n};\n\nexport const Overlay = styled(\"div\")`\n    display: block;\n    background: none;\n    border: none;\n    outline: none;\n    resize: none;\n    font: inherit;\n    max-width: 100%;\n    padding: 0;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    pointer-events: none;\n    padding: inherit;\n\n    ${(props) =>\n        props.collapsed &&\n        css`\n            overflow: hidden;\n            white-space: nowrap;\n            text-overflow: ellipsis;\n        `}\n\n    /* reversed from Input above */\n  -webkit-text-fill-color: initial;\n`;\n\nexport const Inline = styled(\"span\")`\n    font: inherit;\n`;\n\nconst tokenColor = style({\n    prop: \"tokenColor\",\n    cssProperty: \"color\",\n    key: \"colors\",\n});\n\n// const tokenUnderline = style({\n//   prop: 'tokenColor',\n//   cssProperty: 'backgroundColor',\n//   key: 'colors'\n// })\n\nexport const Token = styled(Inline)`\n    position: relative;\n    cursor: pointer;\n    font-weight: 500;\n\n    ${tokenColor}\n`;\n// ${\n//     '' /* &:after {\n//     content: '';\n//     position: absolute;\n//     top: 100%;\n//     left: 0;\n//     right: 0;\n//     height: 1px;\n//     opacity: 0;\n//     transform: translateY(3px);\n//     transition: all 150ms;\n\n//     ${tokenUnderline}\n//   } */\n//   }\n//   ${\n//     '' /* &:hover:after {\n//     opacity: 1;\n//     transform: translateY(0px);\n//   } */\n//   }\n\nToken.defaultProps = {\n    tokenColor: \"#2384FF\",\n};\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { extractTokens } from \"./utils/token\";\nimport Dropdown from \"./components/dropdown\";\nimport OutsideAlerter from \"./utils/outside-click\";\n\nimport { Container, InputContainer, Input, Overlay, Inline, Token } from \"./index.styl\";\n\nexport default class QueryAssist extends Component {\n    static propTypes = {\n        // eslint-disable-line\n        debug: PropTypes.bool,\n        data: PropTypes.array,\n        nameKey: PropTypes.string,\n        nameKeyIncludes: PropTypes.array,\n        defaultValue: PropTypes.string,\n        placeholder: PropTypes.string,\n        onChange: PropTypes.func,\n        onSubmit: PropTypes.func,\n        keyboardHelpers: PropTypes.bool,\n        collapseOnBlur: PropTypes.bool,\n        footerComponent: PropTypes.func,\n        inputProps: PropTypes.object,\n        dropdownProps: PropTypes.object,\n        selectorProps: PropTypes.object,\n        listProps: PropTypes.object,\n        alwaysLeft: PropTypes.bool, // Choose if element will be always left\n        translations: PropTypes.object,\n    };\n\n    static defaultProps = {\n        // eslint-disable-line\n        data: [],\n        nameKey: \"name\",\n        nameKeyIncludes: [\"name\"],\n        defaultValue: \"\",\n        onChange: () => {},\n        onSubmit: () => {},\n        placeholder: \"Search\",\n        inputProps: {},\n        dropdownProps: {},\n        selectorProps: {},\n        listProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onAutosuggest = this.onAutosuggest.bind(this);\n        this.onSelectValue = this.onSelectValue.bind(this);\n        this.handleEnterKey = this.handleEnterKey.bind(this);\n        this.shouldAutosuggest = this.shouldAutosuggest.bind(this);\n        this.onClose = this.onClose.bind(this);\n        // this.onClickToken = this.onClickToken.bind(this)\n        this.extract = this.extract.bind(this);\n        this.getCurrentChunk = this.getCurrentChunk.bind(this);\n        this.buildOverlay = this.buildOverlay.bind(this);\n        this.state = {\n            focused: false,\n            value: props.defaultValue,\n            attributes: props.data,\n            overlayComponents: [],\n            dropdownClosed: false,\n            dropdownOpen: false,\n            dropdownValue: null,\n            dropdownX: null,\n            dropdownY: null,\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            overlayComponents: this.buildOverlay(this.state.value),\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { value, attributes } = this.state;\n\n        if (value !== prevState.value) {\n            this.props.onChange(value);\n        }\n\n        if (value !== prevState.value || attributes.length !== prevState.attributes.length) {\n            this.setState(\n                {\n                    overlayComponents: this.buildOverlay(value),\n                },\n                this.onAutosuggest\n            );\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const newState = {};\n\n        // default value can be empty string (to clear search)\n        if (nextProps.defaultValue !== undefined) {\n            newState.value = nextProps.defaultValue;\n        }\n\n        if (nextProps.data) {\n            newState.attributes = nextProps.data;\n        }\n\n        this.setState(newState);\n    }\n\n    onFocus(evt) {\n        this.setState(\n            {\n                focused: true,\n            },\n            this.onAutosuggest\n        );\n    }\n\n    onBlur(evt) {\n        this.setState({\n            focused: false,\n        });\n    }\n\n    onKeyDown(evt) {\n        if (evt.keyCode === 13) {\n            this.handleEnterKey(evt);\n        }\n\n        // close dropdown if navigating with arrow keys\n        if (evt.keyCode === 37 || evt.keyCode === 39) {\n            this.onClose();\n        }\n    }\n\n    onChange(evt) {\n        this.setState({\n            value: evt.target.value,\n        });\n    }\n\n    onAutosuggest() {\n        const { value } = this.state;\n        const { offsetLeft, offsetTop } = this._marker;\n\n        const { chunk } = this.getCurrentChunk(value);\n        const suggest = this.shouldAutosuggest(chunk);\n\n        if (suggest) {\n            this.setState({\n                dropdownClosed: false,\n                dropdownOpen: true,\n                dropdownValue: chunk,\n                dropdownX: offsetLeft,\n                dropdownY: offsetTop + 25, // line height + 5 extra padding\n            });\n        } else {\n            this.setState({\n                dropdownOpen: false,\n            });\n        }\n    }\n\n    onSelectValue(chunk, appended = \"\") {\n        const { value } = this.state;\n        const { index, indexEnd } = this.getCurrentChunk(value);\n\n        const before = value.slice(0, index);\n        const after = value.slice(indexEnd);\n        const position = index + chunk.length + appended.length;\n        // const positionEnd = position + after.length\n\n        this.setState(\n            {\n                value: `${before}${chunk}${appended}${after}`,\n                dropdownClosed: appended !== \":\",\n            },\n            () => {\n                // position caret at the end of the inserted value\n                this._input.focus();\n                this._input.setSelectionRange(position, position);\n            }\n        );\n    }\n\n    handleEnterKey(evt) {\n        // whether this input is infocus\n        const isFocused = document.activeElement === this._input;\n\n        // submit on enter, line break on shift enter\n        // dropdown handles enter key globally, so prevent clash\n        if (!evt.shiftKey && isFocused && !this.state.dropdownOpen) {\n            evt.preventDefault();\n            this.props.onSubmit(this.state.value);\n            evt.target.blur();\n        }\n    }\n\n    shouldAutosuggest(chunk) {\n        const { selectionStart } = this._input;\n        const { value, focused } = this.state;\n\n        // next character is whitespace, closing paren or null\n        const nextCharIsEmpty = !value.charAt(selectionStart) || /[)\\s]/.test(value.charAt(selectionStart));\n\n        // whitespace/negation/paren before and whitespace after caret\n        const isNewWord = nextCharIsEmpty && /[\\s-(]/.test(value.charAt(selectionStart - 1));\n\n        // cursor is at end of the current word\n        const atEndOfWord = nextCharIsEmpty && /[^)\\s]/.test(value.charAt(selectionStart - 1));\n\n        return focused && (!value || isNewWord || (atEndOfWord && !this.state.dropdownClosed));\n    }\n\n    onClose(forWord) {\n        this.setState({\n            dropdownOpen: false,\n            // don't reopen if it was closed for current word\n            dropdownClosed: forWord || false,\n        });\n    }\n\n    // onClickToken (start, end) {\n    //   // move cursor to end of token\n    //   this._input.focus()\n    //   this._input.setSelectionRange(end, end)\n    // }\n\n    extract(value) {\n        const { nameKeyIncludes } = this.props;\n        const { attributes } = this.state;\n\n        return extractTokens(value, attributes, nameKeyIncludes);\n    }\n\n    getCurrentChunk(value) {\n        const { selectionStart } = this._input;\n\n        // get location of each token found in value\n        const tokens = this.extract(value);\n\n        // find index of the closest previous whitespace\n        const prevStr = value.substring(0, selectionStart);\n        const prevMatch = prevStr.match(/[^\\s]*$/);\n        const prevIdx = prevMatch ? prevStr.lastIndexOf(prevMatch[prevMatch.length - 1]) : -1;\n\n        // determine correct index for the start of the chunk\n        let index = prevIdx;\n        for (const [start, end] of tokens.reverse()) {\n            // token is between whitespace and cursor\n            if (selectionStart > end && prevIdx < start) {\n                index = end;\n                break;\n            }\n            // at the end of or inside a token (thats what she said)\n            if (selectionStart > start && selectionStart <= end) {\n                index = start;\n                break;\n            }\n            // there is whitespace in the token\n            if (prevIdx > start && prevIdx < end) {\n                index = end;\n                break;\n            }\n        }\n\n        // value is result of cursor back to beginning of chunk\n        const chunk = value.substring(index, selectionStart);\n        const indexEnd = index + chunk.length;\n\n        return {\n            index,\n            indexEnd,\n            chunk,\n        };\n    }\n\n    buildTokens(value, relativeToIdx = 0) {\n        const chunks = [];\n        const positions = this.extract(value);\n\n        let currentPosition = 0;\n        positions.reduce(\n            (prev, next) => {\n                // const startIdx = next[0] + relativeToIdx\n                // const endIdx = next[1] + relativeToIdx\n\n                chunks.push(value.substring(prev[1], next[0]));\n                chunks.push(\n                    <Token key={`token-${next[0]}`} tokenColor={this.props.inputProps.tokenColor}>\n                        {value.substring(next[0], next[1])}\n                    </Token>\n                );\n\n                currentPosition = next[1];\n                return next;\n            },\n            [null, 0]\n        );\n\n        chunks.push(value.substring(currentPosition));\n        return chunks.filter(Boolean);\n    }\n\n    buildOverlay(value) {\n        // figure out where we should split the overlay,\n        // so we know where to position the dropdown\n        const { index } = this.getCurrentChunk(value);\n\n        // everything to the left of the current word/token\n        const stuffOnLeft = this.buildTokens(value.substring(0, index));\n\n        // everything to the right of the current word/token\n        // need to have default whitespace or dropdown will not find position of caret\n        const stuffOnRight = this.buildTokens(value.substring(index) || \" \", index);\n\n        // since it will never split up a token,\n        // we can build each side of cursor independently\n        return [\n            stuffOnLeft,\n            <Inline key={`after-${index}`} style={{ outline: this.props.debug ? \"1px solid red\" : \"none\" }} ref={(ref) => (this._marker = ref)}>\n                {stuffOnRight}\n            </Inline>,\n        ];\n    }\n\n    render() {\n        const {\n            nameKey,\n            className,\n            inputProps,\n            placeholder,\n            keyboardHelpers,\n            collapseOnBlur,\n            footerComponent,\n            dropdownProps,\n            selectorProps,\n            listProps,\n            alwaysLeft,\n            translations,\n        } = this.props;\n\n        const { value, attributes, dropdownOpen, dropdownValue, dropdownX, dropdownY, overlayComponents } = this.state;\n\n        const collapsed = !this.state.focused && collapseOnBlur;\n\n        return (\n            <OutsideAlerter notify={this.onClose}>\n                <Container className={className}>\n                    <InputContainer {...inputProps} onClick={() => this._input.focus()}>\n                        <Overlay collapsed={collapsed}>{overlayComponents}</Overlay>\n\n                        <Input\n                            autoComplete=\"off\"\n                            autoCorrect=\"off\"\n                            autoCapitalize=\"off\"\n                            spellCheck=\"false\"\n                            autoFocus={inputProps.autoFocus}\n                            maxRows={collapsed ? 1 : undefined}\n                            placeholder={placeholder}\n                            placeholderColor={inputProps.placeholderColor}\n                            value={value}\n                            onFocus={this.onFocus}\n                            onBlur={this.onBlur}\n                            onKeyDown={this.onKeyDown}\n                            onChange={this.onChange}\n                            ref={(ref) => (this._input = ref)}\n                        />\n                    </InputContainer>\n\n                    {dropdownOpen && (\n                        <Dropdown\n                            keyboardHelpers={keyboardHelpers}\n                            footerComponent={footerComponent}\n                            attributes={attributes}\n                            value={dropdownValue}\n                            nameKey={nameKey}\n                            onSelect={this.onSelectValue}\n                            onClose={this.onClose}\n                            offsetX={alwaysLeft ? 0 : dropdownX}\n                            offsetY={dropdownY}\n                            dropdownProps={dropdownProps}\n                            selectorProps={selectorProps}\n                            listProps={listProps}\n                            translations={translations}\n                        />\n                    )}\n                </Container>\n            </OutsideAlerter>\n        );\n    }\n}\n"],"names":["compareFuzzy","partialValue","fullValue","RegExp","escape","test","tokenRegex","opts","qtfr","partial","parseToken","value","attributes","nameKeyIncludes","results","Array","isArray","exec","length","tokenData","fullToken","attributeName","attributeNameValid","attributeValue","attributeValueValid","prepended","operator","negated","indexOf","quoted","Boolean","wildcard","attribute","find","attr","matchFound","key","enumerations","findIndex","v","swingDown","keyframes","_templateObject","_taggedTemplateLiteralLoose","Container","styled","_templateObject2","top","left","color","boxShadow","borders","borderColor","borderRadius","space","width","minWidth","fontSize","fontWeight","fontFamily","lineHeight","letterSpacing","defaultProps","bg","Section","_templateObject3","props","center","Suggestions","_templateObject4","maxHeight","Suggestion","_templateObject5","maxWidth","active","p","Operators","_templateObject6","Operator","_templateObject7","OperatorLone","_templateObject8","Key","_templateObject9","KeyOutline","_templateObject10","theme","long","Helper","_templateObject11","Dropdown","PureComponent","constructor","super","this","onKeyDown","bind","handleEnterKey","handleEscKey","handleArrowKeys","adjustListScroll","getAttribute","getSuggestions","getSuggestionAddons","filterSuggestions","acceptSuggestion","getOperators","setOperator","state","suggestions","highlightedIdx","selectedIdx","componentDidMount","keyboardHelpers","document","addEventListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","componentDidUpdate","onClose","evt","keyCode","preventDefault","isDownKey","max","newIdx","setState","offsetTop","clientHeight","selectorHeight","_selected","scrollTop","listHeight","_list","topWaypoint","bottomWaypoint","position","nameKey","translationKey","map","parsed","addons","type","push","searchValue","filtered","filter","concat","onSelect","suggestion","operators","name","char","newOperator","newValue","replace","token","serializeToken","render","Footer","footerComponent","React","createElement","_extends","offsetX","offsetY","dropdownProps","listProps","ref","isActive","onClick","onMouseOver","undefined","selectorProps","translations","negate","navigate","select","propTypes","PropTypes","string","array","func","number","bool","object","OutsideAlerter","Component","wrapperRef","createRef","handleClickOutside","event","current","contains","target","notify","children","InputContainer","textAlign","border","CleanInput","Textarea","placeholderColor","style","prop","cssProperty","Input","Overlay","collapsed","css","Inline","tokenColor","Token","QueryAssist","onFocus","onBlur","onChange","onAutosuggest","onSelectValue","shouldAutosuggest","extract","getCurrentChunk","buildOverlay","focused","defaultValue","data","overlayComponents","dropdownClosed","dropdownOpen","dropdownValue","dropdownX","dropdownY","prevProps","prevState","newState","offsetLeft","_marker","chunk","suggest","appended","index","indexEnd","before","slice","after","_input","focus","setSelectionRange","isFocused","activeElement","shiftKey","onSubmit","blur","selectionStart","nextCharIsEmpty","charAt","isNewWord","atEndOfWord","forWord","positions","regex","result","lastIndex","extractTokens","tokens","prevStr","substring","prevMatch","match","prevIdx","lastIndexOf","start","end","reverse","buildTokens","relativeToIdx","chunks","currentPosition","reduce","prev","next","inputProps","stuffOnLeft","stuffOnRight","outline","debug","className","placeholder","collapseOnBlur","alwaysLeft","autoComplete","autoCorrect","autoCapitalize","spellCheck","autoFocus","maxRows"],"mappings":"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"}