{"version":3,"file":"lib.modern.mjs","sources":["../src/component/utils/compare.js","../src/component/utils/token.js","../src/component/components/dropdown.styl.js","../src/component/components/dropdown.js","../src/component/utils/outside-click.js","../src/component/index.styl.js","../src/component/index.js"],"sourcesContent":["import escape from \"escape-string-regexp\";\r\n\r\n/**\r\n * case-insensitive comparison\r\n */\r\nexport function compare(partialValue, fullValue) {\r\n    return new RegExp(`^${escape(partialValue || \"\")}$`, \"i\").test(fullValue || \"\");\r\n}\r\n\r\n/**\r\n * case-insensitive comparison (fuzzy)\r\n */\r\nexport function compareFuzzy(partialValue, fullValue) {\r\n    return new RegExp(escape(partialValue || \"\"), \"i\").test(fullValue || \"\");\r\n}\r\n","import { compare, compareFuzzy } from \"./compare\";\r\n\r\nexport function tokenRegex(opts = {}) {\r\n    const qtfr = opts.partial ? \"*\" : \"+\";\r\n\r\n    return new RegExp(\r\n        `(?!^|\\\\(|\\\\s)*` + // find beginning of token\r\n            `([-]+)?` + // capture prepended negation character\r\n            `([\\\\w.$]+)` + // the attribute name\r\n            `${opts.partial ? \"?\" : \"\"}` + // assume it's a token, even with no attribute\r\n            `:${opts.partial ? \"?\" : \"\"}` + // assume it's a token, even with no colon\r\n            `(?!:)` + // make sure colon isn't repeated\r\n            `([><=]*)` + // the operators\r\n            `(?:(\")(.${qtfr}?)(\\\\*)?\"|([^\\\\s()*\"]${qtfr}))` + // the attribute value, checking for quotes\r\n            `${opts.partial ? \"?\" : \"\"}` + // whether attribute value can be empty\r\n            `(\\\\*)?` + // capture appended wildcard\r\n            `(?!\\\\s|\\\\)|$)*`, // find the end of the token\r\n        \"g\"\r\n    );\r\n}\r\n\r\nexport function parseToken(value, attributes = [], nameKeyIncludes = []) {\r\n    const results = Array.isArray(value) ? value : tokenRegex({ partial: true }).exec(value);\r\n\r\n    if (!results || !results.length) {\r\n        return {};\r\n    }\r\n\r\n    const tokenData = {\r\n        fullToken: results[0],\r\n        attributeName: results[2],\r\n        attributeNameValid: false,\r\n        attributeValue: results[5] || results[7],\r\n        attributeValueValid: false,\r\n        prepended: results[1] || \"\",\r\n        operator: results[3],\r\n        negated: results[0].indexOf(\"-\") > -1,\r\n        quoted: Boolean(results[4]),\r\n        wildcard: Boolean(results[6] || results[8]),\r\n    };\r\n\r\n    if (attributes) {\r\n        const attribute = attributes.find((attr) => {\r\n            let matchFound = false;\r\n            for (const key of nameKeyIncludes) {\r\n                if (compare(attr[key], tokenData.attributeName)) {\r\n                    matchFound = true;\r\n                    break;\r\n                }\r\n            }\r\n            return matchFound;\r\n        });\r\n\r\n        if (attribute) {\r\n            tokenData.attributeNameValid = true;\r\n            tokenData.attributeValueValid = true;\r\n\r\n            if (Array.isArray(attribute.enumerations)) {\r\n                tokenData.attributeValueValid = attribute.enumerations.findIndex((v) => compareFuzzy(tokenData.attributeValue, v)) > -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    return tokenData;\r\n}\r\n\r\nexport function serializeToken(token) {\r\n    const { prepended = \"\", attributeName = \"\", attributeValue = \"\", operator = \"\" } = token || {};\r\n\r\n    return `${prepended}${attributeName}:${operator}${attributeValue}`;\r\n}\r\n\r\nexport function extractTokens(value, attributes, nameKeyIncludes) {\r\n    const positions = [];\r\n    const regex = tokenRegex();\r\n\r\n    let result;\r\n    while ((result = regex.exec(value)) !== null) {\r\n        if (attributes) {\r\n            const parsed = parseToken(result, attributes, nameKeyIncludes);\r\n\r\n            if (!parsed.attributeNameValid || !parsed.attributeValueValid) {\r\n                continue;\r\n            }\r\n        }\r\n\r\n        positions.push([\r\n            result.index, // start position\r\n            regex.lastIndex, // end position\r\n        ]);\r\n    }\r\n\r\n    return positions;\r\n}\r\n","import styled from \"@emotion/styled\";\r\nimport { keyframes } from \"@emotion/react\";\r\n\r\nimport {\r\n    top,\r\n    left,\r\n    color,\r\n    boxShadow,\r\n    borders,\r\n    borderColor,\r\n    borderRadius,\r\n    space,\r\n    width,\r\n    minWidth,\r\n    maxWidth,\r\n    maxHeight,\r\n    fontSize,\r\n    fontWeight,\r\n    fontFamily,\r\n    lineHeight,\r\n    letterSpacing,\r\n} from \"styled-system\";\r\n\r\nexport const swingDown = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    transform: perspective(50em) rotateX(-30deg);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: perspective(50em) rotateX(0deg);\r\n  }\r\n`;\r\n\r\nexport const Container = styled(\"aside\")`\r\n    display: inline-block;\r\n    position: absolute;\r\n    z-index: 10;\r\n    transform-origin: 50% 0;\r\n    animation: ${swingDown} ease-in-out 250ms;\r\n    transition: top 100ms, left 100ms;\r\n\r\n    ${top}\r\n    ${left}\r\n  ${color}\r\n  ${boxShadow}\r\n  ${borders}\r\n  ${borderColor}\r\n  ${borderRadius}\r\n  ${space}\r\n  ${width}\r\n  ${minWidth}\r\n  ${fontSize}\r\n  ${fontWeight}\r\n  ${fontFamily}\r\n  ${lineHeight}\r\n  ${letterSpacing}\r\n`;\r\n\r\nContainer.defaultProps = {\r\n    bg: \"#555555\",\r\n    boxShadow: \"0 4px 10px rgba(0, 0, 0, .25)\",\r\n    color: \"#FFFFFF\",\r\n    minWidth: \"280px\",\r\n};\r\n\r\nexport const Section = styled(\"section\")`\r\n    padding: 15px;\r\n    text-align: ${(props) => (props.center ? \"center\" : \"inherit\")};\r\n    :not(:last-child) {\r\n        border-bottom: 1px solid rgba(255, 255, 255, 0.15);\r\n    }\r\n`;\r\n\r\nexport const Suggestions = styled(\"ul\")`\r\n    list-style-type: none;\r\n    line-height: 20px;\r\n    margin: 10px 0;\r\n    overflow: auto;\r\n    padding-inline-start: 0;\r\n\r\n    ${space}\r\n    ${color}\r\n  ${borders}\r\n  ${maxHeight}\r\n`;\r\n\r\nSuggestions.defaultProps = {\r\n    maxHeight: \"200px\",\r\n};\r\n\r\nexport const Suggestion = styled(\"li\")`\r\n    cursor: pointer;\r\n    border: 1px solid transparent;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n\r\n    ${space}\r\n    ${maxWidth}\r\n\r\n  ${(props) => props.active && color}\r\n  ${(props) => props.active && borders}\r\n  ${(props) => props.active && borderColor}\r\n`;\r\n\r\nSuggestion.defaultProps = {\r\n    bg: \"#FFFFFF\",\r\n    color: \"#000000\",\r\n    p: \"3px 15px\",\r\n    maxWidth: \"320px\",\r\n};\r\n\r\nexport const Operators = styled(Section)`\r\n    padding: 15px 0;\r\n`;\r\n\r\nexport const Operator = styled(\"div\")`\r\n    display: inline-block;\r\n    background: ${(props) => (props.active ? \"rgba(255, 255, 255, 0.2)\" : \"none\")};\r\n    font-weight: 500;\r\n    line-height: 18px;\r\n    padding: 5px 10px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: rgba(255, 255, 255, 0.1);\r\n    }\r\n`;\r\n\r\nexport const OperatorLone = styled(Operator)`\r\n    display: block;\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nexport const Key = styled(\"div\")`\r\n    display: inline-block;\r\n    background: rgba(255, 255, 255, 0.1);\r\n    border-radius: 2px;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    line-height: 18px;\r\n    min-width: 20px;\r\n    text-align: center;\r\n    vertical-align: middle;\r\n    padding: 2px 5px;\r\n    margin-right: 5px;\r\n`;\r\n\r\nexport const KeyOutline = styled(Key)`\r\n    background: none;\r\n    border: 1px solid ${(props) => props.theme.color};\r\n    color: ${(props) => props.theme.color};\r\n    font-size: 8px;\r\n    padding: 0;\r\n    width: ${(props) => (props.long ? \"36px\" : \"18px\")};\r\n    height: 18px;\r\n`;\r\n\r\nexport const Helper = styled(\"div\")`\r\n    display: inline-block;\r\n    opacity: 0.5;\r\n    &:not(:last-child) {\r\n        margin-right: 15px;\r\n    }\r\n`;\r\n","import React, { PureComponent } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { compareFuzzy } from \"../utils/compare\";\r\nimport { parseToken, serializeToken } from \"../utils/token\";\r\n\r\nimport { Container, Section, Suggestions, Suggestion, Helper, Operators, Operator, OperatorLone, Key, KeyOutline } from \"./dropdown.styl\";\r\n\r\nexport default class Dropdown extends PureComponent {\r\n    static propTypes = {\r\n        // eslint-disable-line\r\n        value: PropTypes.string,\r\n        nameKey: PropTypes.string,\r\n        attributes: PropTypes.array,\r\n        onSelect: PropTypes.func,\r\n        onClose: PropTypes.func,\r\n        offsetX: PropTypes.number,\r\n        offsetY: PropTypes.number,\r\n        keyboardHelpers: PropTypes.bool,\r\n        footerComponent: PropTypes.func,\r\n        dropdownProps: PropTypes.object,\r\n        selectorProps: PropTypes.object,\r\n        listProps: PropTypes.object,\r\n        translations: PropTypes.object,\r\n    };\r\n\r\n    static defaultProps = {\r\n        // eslint-disable-line\r\n        value: \"\",\r\n        nameKey: \"name\",\r\n        translationKey: \"translation\",\r\n        onSelect: () => { },\r\n        onClose: () => { },\r\n        keyboardHelpers: true,\r\n        footerComponent: () => null,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.handleEnterKey = this.handleEnterKey.bind(this);\r\n        this.handleEscKey = this.handleEscKey.bind(this);\r\n        this.handleArrowKeys = this.handleArrowKeys.bind(this);\r\n        this.adjustListScroll = this.adjustListScroll.bind(this);\r\n        this.getAttribute = this.getAttribute.bind(this);\r\n        this.getSuggestions = this.getSuggestions.bind(this);\r\n        this.getSuggestionAddons = this.getSuggestionAddons.bind(this);\r\n        this.filterSuggestions = this.filterSuggestions.bind(this);\r\n        this.acceptSuggestion = this.acceptSuggestion.bind(this);\r\n        this.getOperators = this.getOperators.bind(this);\r\n        this.setOperator = this.setOperator.bind(this);\r\n        this.state = {\r\n            suggestions: [],\r\n            highlightedIdx: 0,\r\n            selectedIdx: null,\r\n            prepended: \"\",\r\n            operator: \"\",\r\n            negated: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.filterSuggestions(this.props.value);\r\n        this.props.keyboardHelpers && document.addEventListener(\"keydown\", this.onKeyDown, false);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.keyboardHelpers && document.removeEventListener(\"keydown\", this.onKeyDown, false);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.value !== nextProps.value) {\r\n            this.filterSuggestions(nextProps.value);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.suggestions.length === 0) {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    onKeyDown(evt) {\r\n        switch (evt.keyCode) {\r\n            case 9: // tab key\r\n            case 13: // enter key\r\n                this.handleEnterKey(evt);\r\n                break;\r\n            case 27: // esc key\r\n                this.handleEscKey(evt);\r\n                break;\r\n            case 38: // up key\r\n            case 40: // down key\r\n                this.handleArrowKeys(evt, evt.keyCode);\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleEnterKey(evt) {\r\n        evt.preventDefault();\r\n        this.acceptSuggestion();\r\n    }\r\n\r\n    handleEscKey(evt) {\r\n        evt.preventDefault();\r\n        this.props.onClose(true);\r\n    }\r\n\r\n    handleArrowKeys(evt, keyCode) {\r\n        evt.preventDefault();\r\n\r\n        const { highlightedIdx } = this.state;\r\n        const isDownKey = keyCode === 40;\r\n\r\n        // the furthest down it can go before wrapping\r\n        const max = this.state.suggestions.length - 1;\r\n\r\n        // determine the next position\r\n        const newIdx = highlightedIdx !== null ? (isDownKey ? highlightedIdx + 1 : highlightedIdx - 1) : isDownKey ? 0 : max;\r\n\r\n        this.setState(\r\n            {\r\n                // make sure it doesn't go out of bounds by resetting to opposite side\r\n                highlightedIdx: isDownKey ? (newIdx <= max ? newIdx : 0) : newIdx >= 0 ? newIdx : max,\r\n            },\r\n            this.adjustListScroll\r\n        );\r\n    }\r\n\r\n    adjustListScroll() {\r\n        const { offsetTop, clientHeight: selectorHeight } = this._selected;\r\n\r\n        const { scrollTop, clientHeight: listHeight } = this._list;\r\n\r\n        const topWaypoint = selectorHeight;\r\n        const bottomWaypoint = listHeight - selectorHeight;\r\n        const position = offsetTop - scrollTop;\r\n\r\n        if (position > bottomWaypoint) {\r\n            this._list.scrollTop += selectorHeight + (position - bottomWaypoint);\r\n        } else if (position < topWaypoint) {\r\n            this._list.scrollTop = offsetTop - selectorHeight + (position - topWaypoint);\r\n        }\r\n    }\r\n\r\n    getAttribute(selectedIdx) {\r\n        if (selectedIdx !== null && selectedIdx > -1) {\r\n            return this.props.attributes[selectedIdx];\r\n        }\r\n    }\r\n\r\n    getSuggestions(attribute) {\r\n        const { nameKey, attributes, translationKey } = this.props;\r\n        // all options in dropdown\r\n        return attribute ? attribute.enumerations || [] : attributes.map((attr) => attr[translationKey] || attr[nameKey]);\r\n    }\r\n\r\n    getSuggestionAddons(attribute, parsed) {\r\n        const addons = [];\r\n\r\n        if (attribute) {\r\n            if (!parsed.wildcard && !attribute.enumerations && parsed.attributeValue && attribute.type === \"string\") {\r\n                addons.push(`\"${parsed.attributeValue}\"`);\r\n            }\r\n\r\n            if (parsed.attributeValue && attribute.type === \"string\") {\r\n                parsed.quoted && !attribute.enumerations\r\n                    ? addons.push(`\"${parsed.attributeValue}*\"`)\r\n                    : addons.push(`*${parsed.attributeValue}*`, `${parsed.attributeValue}*`, `*${parsed.attributeValue}`);\r\n            }\r\n        }\r\n\r\n        return addons;\r\n    }\r\n\r\n    filterSuggestions(value) {\r\n        const { nameKey, translationKey, attributes } = this.props;\r\n        let parsed = parseToken(value);\r\n\r\n        const hasAttributeName = parsed.attributeName && value.indexOf(\":\") > -1;\r\n        const selectedIdx = hasAttributeName ? attributes.findIndex((attr) => attr[nameKey] === parsed.attributeName || attr[translationKey] === parsed.attributeName) : -1;\r\n\r\n        const attribute = this.getAttribute(selectedIdx);\r\n        const suggestions = this.getSuggestions(attribute);\r\n        const searchValue = selectedIdx > -1 ? parsed.attributeValue : parsed.attributeName;\r\n\r\n        const filtered = suggestions.filter((v) => compareFuzzy(searchValue, v)).concat(this.getSuggestionAddons(attribute, parsed));\r\n\r\n        this.setState({\r\n            selectedIdx,\r\n            prepended: parsed.prepended,\r\n            operator: parsed.operator,\r\n            negated: parsed.negated,\r\n            suggestions: filtered,\r\n            highlightedIdx: 0,\r\n        });\r\n    }\r\n\r\n    acceptSuggestion() {\r\n        const { nameKey, onSelect } = this.props;\r\n\r\n        const { suggestions, highlightedIdx, selectedIdx, prepended, operator } = this.state;\r\n\r\n        const attribute = this.getAttribute(selectedIdx);\r\n        const suggestion = suggestions[highlightedIdx];\r\n\r\n        const newValue = attribute ? `${attribute[nameKey]}:${operator}${suggestion}` : suggestion;\r\n\r\n        const appended = selectedIdx === -1 ? \":\" : \"\";\r\n        onSelect(`${prepended}${newValue}`, appended);\r\n    }\r\n\r\n    getOperators() {\r\n        const operators = [];\r\n        const attribute = this.getAttribute(this.state.selectedIdx);\r\n\r\n        if (attribute) {\r\n            switch (attribute.type) {\r\n                case \"int\":\r\n                case \"float\":\r\n                    operators.push({\r\n                        name: \"GT\",\r\n                        char: \">\",\r\n                        active: this.state.operator === \">\",\r\n                    });\r\n                    operators.push({\r\n                        name: \"LT\",\r\n                        char: \"<\",\r\n                        active: this.state.operator === \"<\",\r\n                    });\r\n                    operators.push({\r\n                        name: \"GTE\",\r\n                        char: \">=\",\r\n                        active: this.state.operator === \">=\",\r\n                    });\r\n                    operators.push({\r\n                        name: \"LTE\",\r\n                        char: \"<=\",\r\n                        active: this.state.operator === \"<=\",\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return operators;\r\n    }\r\n\r\n    setOperator(newOperator) {\r\n        const { value } = this.props;\r\n\r\n        const { negated, operator } = this.state;\r\n\r\n        if (newOperator === \"-\") {\r\n            const newValue = value.replace(/^-?(.*)/, `${negated ? \"\" : \"-\"}$1`);\r\n\r\n            this.props.onSelect(newValue);\r\n        } else {\r\n            const token = parseToken(value);\r\n            token.operator = operator === newOperator ? \"\" : newOperator;\r\n\r\n            this.props.onSelect(serializeToken(token));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const Footer = this.props.footerComponent;\r\n\r\n        return (\r\n            <Container left={this.props.offsetX || 0} top={this.props.offsetY || 0} {...this.props.dropdownProps} data-testid=\"dropdown\">\r\n                <Suggestions {...this.props.listProps} ref={(ref) => (this._list = ref)}>\r\n                    {this.state.suggestions.map((suggestion, key) => {\r\n                        const isActive = this.state.highlightedIdx === key;\r\n\r\n                        return (\r\n                            <Suggestion\r\n                                key={key}\r\n                                active={isActive}\r\n                                onClick={this.acceptSuggestion}\r\n                                onMouseOver={() => this.setState({ highlightedIdx: key })}\r\n                                ref={isActive ? (ref) => (this._selected = ref) : undefined}\r\n                                {...this.props.selectorProps}>\r\n                                {suggestion}\r\n                            </Suggestion>\r\n                        );\r\n                    })}\r\n                </Suggestions>\r\n\r\n                <Operators>\r\n                    <OperatorLone active={this.state.negated} onClick={() => this.setOperator(\"-\")}>\r\n                        <Key>-</Key>\r\n                        {this.props.translations && this.props.translations.negate ? this.props.translations.negate : \"NEGATE\"}\r\n                    </OperatorLone>\r\n\r\n                    {this.getOperators().map((operator, key) => (\r\n                        <Operator key={key} active={operator.active} onClick={() => this.setOperator(operator.char)}>\r\n                            <Key>{operator.char}</Key>\r\n                            {operator.name}\r\n                        </Operator>\r\n                    ))}\r\n                </Operators>\r\n\r\n                {this.props.keyboardHelpers && (\r\n                    <Section center>\r\n                        <Helper>\r\n                            <KeyOutline>▲</KeyOutline>\r\n                            <KeyOutline>▼</KeyOutline>\r\n                            {this.props.translations && this.props.translations.navigate ? this.props.translations.navigate : \"to navigate\"}\r\n                        </Helper>\r\n\r\n                        <Helper>\r\n                            <KeyOutline long>↵</KeyOutline>\r\n                            {this.props.translations && this.props.translations.select ? this.props.translations.select : \"to select\"}\r\n                        </Helper>\r\n                    </Section>\r\n                )}\r\n\r\n                <Footer />\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\n/**\r\n * Component that alerts if you click outside of it\r\n */\r\nexport default class OutsideAlerter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.wrapperRef = React.createRef();\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    /**\r\n     * Alert if clicked on outside of element\r\n     */\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {\r\n            if (this.props.notify) this.props.notify();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div ref={this.wrapperRef}>{this.props.children}</div>;\r\n    }\r\n}\r\n","import styled from \"@emotion/styled\";\r\nimport { css } from \"@emotion/css\";\r\nimport Textarea from \"react-textarea-autosize\";\r\n\r\nimport {\r\n    style,\r\n    space,\r\n    width,\r\n    color,\r\n    borders,\r\n    borderColor,\r\n    borderRadius,\r\n    boxShadow,\r\n    fontSize,\r\n    fontWeight,\r\n    fontFamily,\r\n    lineHeight,\r\n    textAlign,\r\n    letterSpacing,\r\n} from \"styled-system\";\r\n\r\nexport const Container = styled(\"div\")`\r\n    position: relative;\r\n    width: 100%;\r\n`;\r\n\r\nexport const InputContainer = styled(\"div\")`\r\n    position: relative;\r\n    ${space}\r\n    ${width}\r\n  ${borders}\r\n  ${borderColor}\r\n  ${borderRadius}\r\n  ${boxShadow}\r\n  ${color}\r\n  ${fontSize}\r\n  ${fontWeight}\r\n  ${fontFamily}\r\n  ${lineHeight}\r\n  ${letterSpacing}\r\n  ${textAlign}\r\n`;\r\n\r\nInputContainer.defaultProps = {\r\n    bg: \"#FFFFFF\",\r\n    color: \"#505050\",\r\n    border: \"1px solid rgba(0, 0, 0, .1)\",\r\n    fontFamily: \"monospace\",\r\n};\r\n\r\nconst CleanInput = Textarea;\r\n\r\nconst placeholderColor = style({\r\n    prop: \"placeholderColor\",\r\n    cssProperty: \"color\",\r\n    key: \"colors\",\r\n});\r\n\r\nexport const Input = styled(CleanInput)`\r\n    display: block;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    resize: none;\r\n    font: inherit;\r\n    width: 100%;\r\n    padding: 0;\r\n    white-space: pre-wrap;\r\n    word-wrap: break-word;\r\n    /* we only want overlay text visible */\r\n    /* need to do this so caret still shows up */\r\n    color: inherit;\r\n    -webkit-text-fill-color: transparent;\r\n    ::placeholder {\r\n        ${placeholderColor}\r\n        -webkit-text-fill-color: initial;\r\n    }\r\n`;\r\n\r\nInput.defaultProps = {\r\n    lineHeight: \"1.1rem\",\r\n    placeholderColor: \"#D7D7D7\",\r\n};\r\n\r\nexport const Overlay = styled(\"div\")`\r\n    display: block;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    resize: none;\r\n    font: inherit;\r\n    max-width: 100%;\r\n    padding: 0;\r\n    white-space: pre-wrap;\r\n    word-wrap: break-word;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    pointer-events: none;\r\n    padding: inherit;\r\n\r\n    ${(props) =>\r\n        props.collapsed &&\r\n        css`\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            text-overflow: ellipsis;\r\n        `}\r\n\r\n    /* reversed from Input above */\r\n  -webkit-text-fill-color: initial;\r\n`;\r\n\r\nexport const Inline = styled(\"span\")`\r\n    font: inherit;\r\n`;\r\n\r\nconst tokenColor = style({\r\n    prop: \"tokenColor\",\r\n    cssProperty: \"color\",\r\n    key: \"colors\",\r\n});\r\n\r\n// const tokenUnderline = style({\r\n//   prop: 'tokenColor',\r\n//   cssProperty: 'backgroundColor',\r\n//   key: 'colors'\r\n// })\r\n\r\nexport const Token = styled(Inline)`\r\n    position: relative;\r\n    cursor: pointer;\r\n    font-weight: 500;\r\n\r\n    ${tokenColor}\r\n`;\r\n// ${\r\n//     '' /* &:after {\r\n//     content: '';\r\n//     position: absolute;\r\n//     top: 100%;\r\n//     left: 0;\r\n//     right: 0;\r\n//     height: 1px;\r\n//     opacity: 0;\r\n//     transform: translateY(3px);\r\n//     transition: all 150ms;\r\n\r\n//     ${tokenUnderline}\r\n//   } */\r\n//   }\r\n//   ${\r\n//     '' /* &:hover:after {\r\n//     opacity: 1;\r\n//     transform: translateY(0px);\r\n//   } */\r\n//   }\r\n\r\nToken.defaultProps = {\r\n    tokenColor: \"#2384FF\",\r\n};\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { extractTokens } from \"./utils/token\";\r\nimport Dropdown from \"./components/dropdown\";\r\nimport OutsideAlerter from \"./utils/outside-click\";\r\n\r\nimport { Container, InputContainer, Input, Overlay, Inline, Token } from \"./index.styl\";\r\n\r\nexport default class QueryAssist extends Component {\r\n    static propTypes = {\r\n        // eslint-disable-line\r\n        debug: PropTypes.bool,\r\n        data: PropTypes.array,\r\n        nameKey: PropTypes.string,\r\n        nameKeyIncludes: PropTypes.array,\r\n        defaultValue: PropTypes.string,\r\n        placeholder: PropTypes.string,\r\n        onChange: PropTypes.func,\r\n        onSubmit: PropTypes.func,\r\n        keyboardHelpers: PropTypes.bool,\r\n        collapseOnBlur: PropTypes.bool,\r\n        footerComponent: PropTypes.func,\r\n        inputProps: PropTypes.object,\r\n        dropdownProps: PropTypes.object,\r\n        selectorProps: PropTypes.object,\r\n        listProps: PropTypes.object,\r\n        alwaysLeft: PropTypes.bool, // Choose if element will be always left\r\n        translations: PropTypes.object,\r\n    };\r\n\r\n    static defaultProps = {\r\n        // eslint-disable-line\r\n        data: [],\r\n        nameKey: \"name\",\r\n        nameKeyIncludes: [\"name\"],\r\n        defaultValue: \"\",\r\n        onChange: () => {},\r\n        onSubmit: () => {},\r\n        placeholder: \"Search\",\r\n        inputProps: {},\r\n        dropdownProps: {},\r\n        selectorProps: {},\r\n        listProps: {},\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onFocus = this.onFocus.bind(this);\r\n        this.onBlur = this.onBlur.bind(this);\r\n        this.onKeyDown = this.onKeyDown.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onAutosuggest = this.onAutosuggest.bind(this);\r\n        this.onSelectValue = this.onSelectValue.bind(this);\r\n        this.handleEnterKey = this.handleEnterKey.bind(this);\r\n        this.shouldAutosuggest = this.shouldAutosuggest.bind(this);\r\n        this.onClose = this.onClose.bind(this);\r\n        // this.onClickToken = this.onClickToken.bind(this)\r\n        this.extract = this.extract.bind(this);\r\n        this.getCurrentChunk = this.getCurrentChunk.bind(this);\r\n        this.buildOverlay = this.buildOverlay.bind(this);\r\n        this.state = {\r\n            focused: false,\r\n            value: props.defaultValue,\r\n            attributes: props.data,\r\n            overlayComponents: [],\r\n            dropdownClosed: false,\r\n            dropdownOpen: false,\r\n            dropdownValue: null,\r\n            dropdownX: null,\r\n            dropdownY: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            overlayComponents: this.buildOverlay(this.state.value),\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { value, attributes } = this.state;\r\n\r\n        if (value !== prevState.value) {\r\n            this.props.onChange(value);\r\n        }\r\n\r\n        if (value !== prevState.value || attributes.length !== prevState.attributes.length) {\r\n            this.setState(\r\n                {\r\n                    overlayComponents: this.buildOverlay(value),\r\n                },\r\n                this.onAutosuggest\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        const newState = {};\r\n\r\n        // default value can be empty string (to clear search)\r\n        if (nextProps.defaultValue !== undefined) {\r\n            newState.value = nextProps.defaultValue;\r\n        }\r\n\r\n        if (nextProps.data) {\r\n            newState.attributes = nextProps.data;\r\n        }\r\n\r\n        this.setState(newState);\r\n    }\r\n\r\n    onFocus(evt) {\r\n        this.setState(\r\n            {\r\n                focused: true,\r\n            },\r\n            this.onAutosuggest\r\n        );\r\n    }\r\n\r\n    onBlur(evt) {\r\n        this.setState({\r\n            focused: false,\r\n        });\r\n    }\r\n\r\n    onKeyDown(evt) {\r\n        if (evt.keyCode === 13) {\r\n            this.handleEnterKey(evt);\r\n        }\r\n\r\n        // close dropdown if navigating with arrow keys\r\n        if (evt.keyCode === 37 || evt.keyCode === 39) {\r\n            this.onClose();\r\n        }\r\n    }\r\n\r\n    onChange(evt) {\r\n        this.setState({\r\n            value: evt.target.value,\r\n        });\r\n    }\r\n\r\n    onAutosuggest() {\r\n        const { value } = this.state;\r\n        const { offsetLeft, offsetTop } = this._marker;\r\n\r\n        const { chunk } = this.getCurrentChunk(value);\r\n        const suggest = this.shouldAutosuggest(chunk);\r\n\r\n        if (suggest) {\r\n            this.setState({\r\n                dropdownClosed: false,\r\n                dropdownOpen: true,\r\n                dropdownValue: chunk,\r\n                dropdownX: offsetLeft,\r\n                dropdownY: offsetTop + 25, // line height + 5 extra padding\r\n            });\r\n        } else {\r\n            this.setState({\r\n                dropdownOpen: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    onSelectValue(chunk, appended = \"\") {\r\n        const { value } = this.state;\r\n        const { index, indexEnd } = this.getCurrentChunk(value);\r\n\r\n        const before = value.slice(0, index);\r\n        const after = value.slice(indexEnd);\r\n        const position = index + chunk.length + appended.length;\r\n        // const positionEnd = position + after.length\r\n\r\n        this.setState(\r\n            {\r\n                value: `${before}${chunk}${appended}${after}`,\r\n                dropdownClosed: appended !== \":\",\r\n            },\r\n            () => {\r\n                // position caret at the end of the inserted value\r\n                this._input.focus();\r\n                this._input.setSelectionRange(position, position);\r\n            }\r\n        );\r\n    }\r\n\r\n    handleEnterKey(evt) {\r\n        // whether this input is infocus\r\n        const isFocused = document.activeElement === this._input;\r\n\r\n        // submit on enter, line break on shift enter\r\n        // dropdown handles enter key globally, so prevent clash\r\n        if (!evt.shiftKey && isFocused && !this.state.dropdownOpen) {\r\n            evt.preventDefault();\r\n            this.props.onSubmit(this.state.value);\r\n            evt.target.blur();\r\n        }\r\n    }\r\n\r\n    shouldAutosuggest(chunk) {\r\n        const { selectionStart } = this._input;\r\n        const { value, focused } = this.state;\r\n\r\n        // next character is whitespace, closing paren or null\r\n        const nextCharIsEmpty = !value.charAt(selectionStart) || /[)\\s]/.test(value.charAt(selectionStart));\r\n\r\n        // whitespace/negation/paren before and whitespace after caret\r\n        const isNewWord = nextCharIsEmpty && /[\\s-(]/.test(value.charAt(selectionStart - 1));\r\n\r\n        // cursor is at end of the current word\r\n        const atEndOfWord = nextCharIsEmpty && /[^)\\s]/.test(value.charAt(selectionStart - 1));\r\n\r\n        return focused && (!value || isNewWord || (atEndOfWord && !this.state.dropdownClosed));\r\n    }\r\n\r\n    onClose(forWord) {\r\n        this.setState({\r\n            dropdownOpen: false,\r\n            // don't reopen if it was closed for current word\r\n            dropdownClosed: forWord || false,\r\n        });\r\n    }\r\n\r\n    // onClickToken (start, end) {\r\n    //   // move cursor to end of token\r\n    //   this._input.focus()\r\n    //   this._input.setSelectionRange(end, end)\r\n    // }\r\n\r\n    extract(value) {\r\n        const { nameKeyIncludes } = this.props;\r\n        const { attributes } = this.state;\r\n\r\n        return extractTokens(value, attributes, nameKeyIncludes);\r\n    }\r\n\r\n    getCurrentChunk(value) {\r\n        const { selectionStart } = this._input;\r\n\r\n        // get location of each token found in value\r\n        const tokens = this.extract(value);\r\n\r\n        // find index of the closest previous whitespace\r\n        const prevStr = value.substring(0, selectionStart);\r\n        const prevMatch = prevStr.match(/[^\\s]*$/);\r\n        const prevIdx = prevMatch ? prevStr.lastIndexOf(prevMatch[prevMatch.length - 1]) : -1;\r\n\r\n        // determine correct index for the start of the chunk\r\n        let index = prevIdx;\r\n        for (const [start, end] of tokens.reverse()) {\r\n            // token is between whitespace and cursor\r\n            if (selectionStart > end && prevIdx < start) {\r\n                index = end;\r\n                break;\r\n            }\r\n            // at the end of or inside a token (thats what she said)\r\n            if (selectionStart > start && selectionStart <= end) {\r\n                index = start;\r\n                break;\r\n            }\r\n            // there is whitespace in the token\r\n            if (prevIdx > start && prevIdx < end) {\r\n                index = end;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // value is result of cursor back to beginning of chunk\r\n        const chunk = value.substring(index, selectionStart);\r\n        const indexEnd = index + chunk.length;\r\n\r\n        return {\r\n            index,\r\n            indexEnd,\r\n            chunk,\r\n        };\r\n    }\r\n\r\n    buildTokens(value, relativeToIdx = 0) {\r\n        const chunks = [];\r\n        const positions = this.extract(value);\r\n\r\n        let currentPosition = 0;\r\n        positions.reduce(\r\n            (prev, next) => {\r\n                // const startIdx = next[0] + relativeToIdx\r\n                // const endIdx = next[1] + relativeToIdx\r\n\r\n                chunks.push(value.substring(prev[1], next[0]));\r\n                chunks.push(\r\n                    <Token key={`token-${next[0]}`} tokenColor={this.props.inputProps.tokenColor}>\r\n                        {value.substring(next[0], next[1])}\r\n                    </Token>\r\n                );\r\n\r\n                currentPosition = next[1];\r\n                return next;\r\n            },\r\n            [null, 0]\r\n        );\r\n\r\n        chunks.push(value.substring(currentPosition));\r\n        return chunks.filter(Boolean);\r\n    }\r\n\r\n    buildOverlay(value) {\r\n        // figure out where we should split the overlay,\r\n        // so we know where to position the dropdown\r\n        const { index } = this.getCurrentChunk(value);\r\n\r\n        // everything to the left of the current word/token\r\n        const stuffOnLeft = this.buildTokens(value.substring(0, index));\r\n\r\n        // everything to the right of the current word/token\r\n        // need to have default whitespace or dropdown will not find position of caret\r\n        const stuffOnRight = this.buildTokens(value.substring(index) || \" \", index);\r\n\r\n        // since it will never split up a token,\r\n        // we can build each side of cursor independently\r\n        return [\r\n            stuffOnLeft,\r\n            <Inline key={`after-${index}`} style={{ outline: this.props.debug ? \"1px solid red\" : \"none\" }} ref={(ref) => (this._marker = ref)}>\r\n                {stuffOnRight}\r\n            </Inline>,\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            nameKey,\r\n            className,\r\n            inputProps,\r\n            placeholder,\r\n            keyboardHelpers,\r\n            collapseOnBlur,\r\n            footerComponent,\r\n            dropdownProps,\r\n            selectorProps,\r\n            listProps,\r\n            alwaysLeft,\r\n            translations,\r\n        } = this.props;\r\n\r\n        const { value, attributes, dropdownOpen, dropdownValue, dropdownX, dropdownY, overlayComponents } = this.state;\r\n\r\n        const collapsed = !this.state.focused && collapseOnBlur;\r\n\r\n        return (\r\n            <OutsideAlerter notify={this.onClose}>\r\n                <Container className={className}>\r\n                    <InputContainer {...inputProps} onClick={() => this._input.focus()}>\r\n                        <Overlay collapsed={collapsed}>{overlayComponents}</Overlay>\r\n\r\n                        <Input\r\n                            autoComplete=\"off\"\r\n                            autoCorrect=\"off\"\r\n                            autoCapitalize=\"off\"\r\n                            spellCheck=\"false\"\r\n                            autoFocus={inputProps.autoFocus}\r\n                            maxRows={collapsed ? 1 : undefined}\r\n                            placeholder={placeholder}\r\n                            placeholderColor={inputProps.placeholderColor}\r\n                            value={value}\r\n                            onFocus={this.onFocus}\r\n                            onBlur={this.onBlur}\r\n                            onKeyDown={this.onKeyDown}\r\n                            onChange={this.onChange}\r\n                            ref={(ref) => (this._input = ref)}\r\n                        />\r\n                    </InputContainer>\r\n\r\n                    {dropdownOpen && (\r\n                        <Dropdown\r\n                            keyboardHelpers={keyboardHelpers}\r\n                            footerComponent={footerComponent}\r\n                            attributes={attributes}\r\n                            value={dropdownValue}\r\n                            nameKey={nameKey}\r\n                            onSelect={this.onSelectValue}\r\n                            onClose={this.onClose}\r\n                            offsetX={alwaysLeft ? 0 : dropdownX}\r\n                            offsetY={dropdownY}\r\n                            dropdownProps={dropdownProps}\r\n                            selectorProps={selectorProps}\r\n                            listProps={listProps}\r\n                            translations={translations}\r\n                        />\r\n                    )}\r\n                </Container>\r\n            </OutsideAlerter>\r\n        );\r\n    }\r\n}\r\n"],"names":["compareFuzzy","partialValue","fullValue","RegExp","escape","test","tokenRegex","opts","qtfr","partial","parseToken","value","attributes","nameKeyIncludes","results","Array","isArray","exec","length","tokenData","fullToken","attributeName","attributeNameValid","attributeValue","attributeValueValid","prepended","operator","negated","indexOf","quoted","Boolean","wildcard","attribute","find","attr","matchFound","key","enumerations","findIndex","v","swingDown","keyframes","_t","_","Container","styled","_t2","top","left","color","boxShadow","borders","borderColor","borderRadius","space","width","minWidth","fontSize","fontWeight","fontFamily","lineHeight","letterSpacing","defaultProps","bg","Section","_t3","props","center","Suggestions","_t4","maxHeight","Suggestion","_t5","maxWidth","active","p","Operators","_t6","Operator","_t7","OperatorLone","_t8","Key","_t9","KeyOutline","_t10","theme","long","Helper","_t11","Dropdown","PureComponent","constructor","super","this","onKeyDown","bind","handleEnterKey","handleEscKey","handleArrowKeys","adjustListScroll","getAttribute","getSuggestions","getSuggestionAddons","filterSuggestions","acceptSuggestion","getOperators","setOperator","state","suggestions","highlightedIdx","selectedIdx","componentDidMount","keyboardHelpers","document","addEventListener","componentWillUnmount","removeEventListener","componentWillReceiveProps","nextProps","componentDidUpdate","onClose","evt","keyCode","preventDefault","isDownKey","max","newIdx","setState","offsetTop","clientHeight","selectorHeight","_selected","scrollTop","listHeight","_list","topWaypoint","bottomWaypoint","position","nameKey","translationKey","map","parsed","addons","type","push","searchValue","filtered","filter","concat","onSelect","suggestion","operators","name","char","newOperator","newValue","replace","token","serializeToken","render","Footer","footerComponent","React","createElement","_extends","offsetX","offsetY","dropdownProps","listProps","ref","isActive","onClick","onMouseOver","undefined","selectorProps","translations","negate","navigate","select","propTypes","PropTypes","string","array","func","number","bool","object","OutsideAlerter","Component","wrapperRef","createRef","handleClickOutside","event","current","contains","target","notify","children","t","InputContainer","textAlign","border","CleanInput","Textarea","placeholderColor","style","prop","cssProperty","Input","Overlay","collapsed","css","Inline","tokenColor","Token","QueryAssist","onFocus","onBlur","onChange","onAutosuggest","onSelectValue","shouldAutosuggest","extract","getCurrentChunk","buildOverlay","focused","defaultValue","data","overlayComponents","dropdownClosed","dropdownOpen","dropdownValue","dropdownX","dropdownY","prevProps","prevState","newState","offsetLeft","_marker","chunk","suggest","appended","index","indexEnd","before","slice","after","_input","focus","setSelectionRange","isFocused","activeElement","shiftKey","onSubmit","blur","selectionStart","nextCharIsEmpty","charAt","isNewWord","atEndOfWord","forWord","positions","regex","result","lastIndex","extractTokens","tokens","prevStr","substring","prevMatch","match","prevIdx","lastIndexOf","start","end","reverse","buildTokens","relativeToIdx","chunks","currentPosition","reduce","prev","next","inputProps","stuffOnLeft","stuffOnRight","outline","debug","className","placeholder","collapseOnBlur","alwaysLeft","autoComplete","autoCorrect","autoCapitalize","spellCheck","autoFocus","maxRows"],"mappings":"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"}